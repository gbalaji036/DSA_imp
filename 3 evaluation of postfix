 
#include <stdio.h> 
#include <math.h> 
#include <string.h> 
#define stacksize 70 
 
// Function to push an item onto the stack 
void push(int item, int *top, int s[]) { 
    if (*top == stacksize - 1) { 
        printf("Stack overflow\n"); 
        return; 
    } 
    *top = *top + 1; 
    s[*top] = item; 
} 
 
// Function to pop an item from the stack 
int pop(int *top, int s[]) { 
    if (*top == -1) 
        return -1; 
    int item = s[*top]; 
    *top = *top - 1; 
    return item; 
} 
 
// Function to evaluate a postfix expression 
int evaluate(char postfix[]) { 
    int i, n, op1, op2, res, top, s[stacksize]; 
    char symbol; 
    top = -1; 
    n = strlen(postfix); 
 
    for (i = 0; i < n; i++) { 
        symbol = postfix[i]; 
        switch (symbol) { 
            case '+': 
                op2 = pop(&top, s); 
                op1 = pop(&top, s); 
                res = op1 + op2; 
                push(res, &top, s); 
                break; 
 
            case '-': 
                op2 = pop(&top, s); 
                op1 = pop(&top, s); 
                res = op1 - op2; 
                push(res, &top, s); 
                break; 
 
            case '*': 
                op2 = pop(&top, s); 
                op1 = pop(&top, s); 
                res = op1 * op2; 
                push(res, &top, s); 
                break; 
 
            case '/': 
                op2 = pop(&top, s); 
                op1 = pop(&top, s); 
                if (op2 != 0) { 
                    res = op1 / op2; 
                    push(res, &top, s); 
                } else { 
                    printf("Division by zero error\n"); 
                    return -1; 
                } 
                break; 
 
            case '%': 
                op2 = pop(&top, s); 
                op1 = pop(&top, s); 
                res = op1 % op2; 
                push(res, &top, s); 
                break; 
            case '$': 
            case '^': 
                op2 = pop(&top, s); 
                op1 = pop(&top, s); 
                res = (int)pow((double)op1, (double)op2); // Convert to double for precision 
                push(res, &top, s); 
                break; 
 
            default: 
                // Convert character to integer (assumes single-digit operands) 
                push(symbol - '0', &top, s); 
                break; 
        } 
    } 
 
    return pop(&top, s); // Final result 
} 
 
int main() { 
    int result; 
    char postfix[stacksize]; 
    printf("Enter the postfix expression: "); 
    scanf("%s", postfix); 
    result = evaluate(postfix); 
      printf("The result of the postfix expression is: %d\n", result); 
    return 0; 
} 
